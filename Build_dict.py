from Parse_flags import *
from collections import OrderedDict as Or_dict

def add_subject(_type_, Quick_ref_dic, lines=[], index=0, subject=''):
    """This function adds a new ordered dict to the Quick_ref_dic with the 
    line that the index points to (or subject) as the key to the ordered dict.  
    This key is returned as the current subject.  The ordered dict is 
    initialized with "_type_" being set to the passed in _type_."""
    if not subject:
        subject = lines[index]
    current_dic = Or_dict()
    current_dic['_type_'] = _type_
    Quick_ref_dic[subject] = current_dic
    return subject
    
def strip_leading_empties(test_list):
    if test_list[0].strip()=='':#is the righthand column empty
                #print("Empty right!!!")
                #print(_right)
                #shift the explanations to the top of the example
                for index_b, b in enumerate(test_list):
                    #print(b, index_b)
                    if b.strip()!='':
                        #index_b +=1
                        break
                test_list = test_list[index_b:]
    return test_list
    
def add_multiline(current_dict,_multiline_flag, line='', left=[], right=[]):
    """This function starts or adds to an array of multiline text in the 
    current_dict.  The particular arrar is designated by the _multiline_flag."""
    if current_dict['_type_']=='Comment':
        if _multiline_flag not in current_dict:
            current_dict[_multiline_flag] = []
        current_dict[_multiline_flag].append(line)
    else:
        current_dict[_multiline_flag] = list(zip(left, right))
    
def build_dict(lines, break_at=-1):
    """This function takes an array of strings generated by quickref and turns 
    it into an ordered dict"""
    Quick_ref_dic = Or_dict()
    in_comment = False
    multiline = {'In multiline':False,'column':'Left','Entry':''}
    lines.append(None)
    for index, line in enumerate(lines):
        if index==break_at:
            break
        if line == None:
            break
        elif not(line) or '=======' in line: #skip empty lines 
            in_comment = False
            continue

        elif title_check(lines, index): 
            """Check to see if the current line is the title"""
            subject = add_subject('Title', Quick_ref_dic, lines, index)
            current_dict = Quick_ref_dic[subject]
            #_multiline_flag = '_Multiline_Flag_Starting_'
            left = ['ipython', 'ipython qtconsole', 'ipython notebook', 
                    'ipython notebook --pylab inline', 
                    'ipython notebook --pylab qt', 'ipython3', 
                    'ipython --help-all']
            right = ['Open IPython terminal console', 
                     'Open IPython qtconsole',
                     'Open IPython Notebook (browser interface)',
                     'Open IPython Notebook with inline graphs',
                     'Open IPython Notebook with popup graphs',
                     'Use Python3...',# (can be used in combination any prvious command)',
                     'Show all IPython start flags']
            for L, R in list(zip(left, right)):
                current_dict[L]=R
            subject = add_subject("Heading", Quick_ref_dic, subject='Within IPython:')
            #add_multiline(current_dict,_multiline_flag, left=left, right=right)
            continue
        elif  heading_check(lines, index):# or comment_check(lines, index):
            """Check to see if the current line is a new heading"""
            subject = add_subject('Heading', Quick_ref_dic, lines, index)
            continue
        elif comment_check(lines, index, in_comment): 
            """Check to see if the current line is a comment instead of an 
            example"""
            #print("Line = {}".format( line))
            if not in_comment:
                in_comment = True
                #break_section = True
                cur_com = '_Comment_starts_at_{}_'.format(str(index))
                subject = add_subject('Comment', Quick_ref_dic, subject=cur_com)
            comment = line
            current_dict = Quick_ref_dic[subject]
            add_multiline(current_dict,cur_com, line=comment)
            continue
        else:
            try:
                next_line = lines(index+1)
            except:
                next_line = ''
            m_line_start = multiline_start_check(lines, index, in_comment)
            end_multiline = not right_column_check(next_line) 
            end_multiline = end_multiline and multiline['column'] == 'Right'
            parts = patch_range(line)
        
        if m_line_start or multiline['In multiline']:
            """Check to see is the current line is the start of a multilined 
            example """
            if m_line_start:
                multiline['In multiline']=True
                multiline['column']='Left'
                multiline['Entry'] = '_Multiline_Flag_{}_'.format(str(index))
                _left = []
                _right = []
            rhc = right_column_check(line)

            if len(parts)==1:
                if not rhc:
                    parts.append('')
                else:
                    multiline['column']=='Right'
                    parts = [''] + parts
            else:
                multiline['column'] = 'Right'
            _left.append(parts[0].strip())
            _right.append(parts[1].strip())

        if end_multiline:
            #add the multiline explanation to Quick_ref_dic
            _right = strip_leading_empties(_right)
            _left.reverse()
            _left = strip_leading_empties(_left)
            _left.reverse()
            len_diff = len(_left)-len(_right)
            if len_diff>0: #make the two columns the same length
                _right += [' ']*len_diff
            elif len_diff<0:
                _left += [' ']*(-len_diff)
            current_dict = Quick_ref_dic[subject]
            if len(_right)>1:
                M_key = multiline['Entry']
                add_multiline(current_dict, M_key, left=_left, right=_right)
                multiline={'In multiline':False,'column':'Left','Entry':''}
            else: #if it is not really a multiline entry....
                Quick_ref_dic[subject][_left[0]]=_right[0]
        
        elif (len(parts)>1 or not(line))and not(multiline['In multiline']):                                            #was elif
            """This line contains atleast part of an example and maybe even part
             of an explanation """
            
            part_key = parts[0].strip() #######

            Quick_ref_dic[subject][part_key]=parts[1] #######
            
    return Quick_ref_dic
